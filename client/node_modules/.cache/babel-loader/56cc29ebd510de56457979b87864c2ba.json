{"ast":null,"code":"import _regeneratorRuntime from \"/Users/diarbegisbayev/Desktop/Back-end/event-helper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/diarbegisbayev/Desktop/Back-end/event-helper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/diarbegisbayev/Desktop/Back-end/event-helper/client/src/components/NewEventFields/NewEventFields.jsx\";\n\nimport React, { useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./newEventFields.css\";\n\nvar NewEventFields = function NewEventFields() {\n  var nameRef = useRef();\n  var descriptionRef = useRef();\n  var dateRef = useRef();\n  var pageNavigation = useNavigate();\n\n  function createNewEvent() {\n    return _createNewEvent.apply(this, arguments);\n  }\n\n  function _createNewEvent() {\n    _createNewEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var eventName, eventDescription, eventDate, response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              eventName = nameRef.current.value;\n              eventDescription = descriptionRef.current.value;\n              eventDate = dateRef.current.value;\n              _context.next = 5;\n              return fetch(\"http://localhost:8000/api/events/create\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                  eventName: eventName,\n                  eventDescription: eventDescription,\n                  eventDate: eventDate\n                })\n              });\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              data = _context.sent;\n              console.log(data);\n\n              if (data.status === \"OK\") {\n                pageNavigation(\"../event-information/\".concat(data.eventID));\n              } else {\n                alert(data.error);\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _createNewEvent.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"newEvent-inputs\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"newEvent-name\",\n    placeholder: \"Event name\",\n    required: true,\n    ref: nameRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"newEvent-descrip\",\n    placeholder: \"Event description\",\n    required: true,\n    ref: descriptionRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"newEvent-date\",\n    type: \"date\",\n    placeholder: \"Event date (21-11-2004)\",\n    required: true,\n    ref: dateRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"newEvent-btn\",\n    onClick: createNewEvent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Create\"));\n};\n\nexport default NewEventFields;","map":{"version":3,"sources":["/Users/diarbegisbayev/Desktop/Back-end/event-helper/client/src/components/NewEventFields/NewEventFields.jsx"],"names":["React","useRef","useNavigate","NewEventFields","nameRef","descriptionRef","dateRef","pageNavigation","createNewEvent","eventName","current","value","eventDescription","eventDate","fetch","method","headers","body","JSON","stringify","response","json","data","console","log","status","eventID","alert","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,sBAAP;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,OAAO,GAAGH,MAAM,EAAtB;AACA,MAAMI,cAAc,GAAGJ,MAAM,EAA7B;AACA,MAAMK,OAAO,GAAGL,MAAM,EAAtB;AACA,MAAMM,cAAc,GAAGL,WAAW,EAAlC;;AAJ2B,WAMZM,cANY;AAAA;AAAA;;AAAA;AAAA,+EAM3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,SADR,GACoBL,OAAO,CAACM,OAAR,CAAgBC,KADpC;AAEQC,cAAAA,gBAFR,GAE2BP,cAAc,CAACK,OAAf,CAAuBC,KAFlD;AAGQE,cAAAA,SAHR,GAGoBP,OAAO,CAACI,OAAR,CAAgBC,KAHpC;AAAA;AAAA,qBAKyBG,KAAK,CAAC,yCAAD,EAA4C;AACtEC,gBAAAA,MAAM,EAAE,MAD8D;AAEtEC,gBAAAA,OAAO,EAAE;AAAE,kCAAgB;AAAlB,iBAF6D;AAGtEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEV,kBAAAA,SAAS,EAATA,SAAF;AAAaG,kBAAAA,gBAAgB,EAAhBA,gBAAb;AAA+BC,kBAAAA,SAAS,EAATA;AAA/B,iBAAf;AAHgE,eAA5C,CAL9B;;AAAA;AAKQO,cAAAA,QALR;AAAA;AAAA,qBAWqBA,QAAQ,CAACC,IAAT,EAXrB;;AAAA;AAWQC,cAAAA,IAXR;AAYEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,kBAAIA,IAAI,CAACG,MAAL,KAAgB,IAApB,EAA0B;AACxBlB,gBAAAA,cAAc,gCAAyBe,IAAI,CAACI,OAA9B,EAAd;AACD,eAFD,MAEO;AACLC,gBAAAA,KAAK,CAACL,IAAI,CAACM,KAAN,CAAL;AACD;;AAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAN2B;AAAA;AAAA;;AA2B3B,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,WAAW,EAAC,YAFd;AAGE,IAAA,QAAQ,EAAE,IAHZ;AAIE,IAAA,GAAG,EAAExB,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE;AACE,IAAA,SAAS,EAAC,kBADZ;AAEE,IAAA,WAAW,EAAC,mBAFd;AAGE,IAAA,QAAQ,EAAE,IAHZ;AAIE,IAAA,GAAG,EAAEC,cAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAaE;AACE,IAAA,SAAS,EAAC,eADZ;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,yBAHd;AAIE,IAAA,QAAQ,EAAE,IAJZ;AAKE,IAAA,GAAG,EAAEC,OALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,eAoBE;AAAQ,IAAA,SAAS,EAAC,cAAlB;AAAiC,IAAA,OAAO,EAAEE,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBF,CADF;AA0BD,CArDD;;AAuDA,eAAeL,cAAf","sourcesContent":["import React, { useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./newEventFields.css\";\n\nconst NewEventFields = () => {\n  const nameRef = useRef();\n  const descriptionRef = useRef();\n  const dateRef = useRef();\n  const pageNavigation = useNavigate();\n\n  async function createNewEvent() {\n    const eventName = nameRef.current.value;\n    const eventDescription = descriptionRef.current.value;\n    const eventDate = dateRef.current.value;\n\n    const response = await fetch(\"http://localhost:8000/api/events/create\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ eventName, eventDescription, eventDate }),\n    });\n\n    const data = await response.json();\n    console.log(data);\n\n    if (data.status === \"OK\") {\n      pageNavigation(`../event-information/${data.eventID}`);\n    } else {\n      alert(data.error);\n    }\n  }\n\n  return (\n    <div className=\"newEvent-inputs\">\n      <input\n        className=\"newEvent-name\"\n        placeholder=\"Event name\"\n        required={true}\n        ref={nameRef}\n      />\n      <input\n        className=\"newEvent-descrip\"\n        placeholder=\"Event description\"\n        required={true}\n        ref={descriptionRef}\n      />\n      <input\n        className=\"newEvent-date\"\n        type=\"date\"\n        placeholder=\"Event date (21-11-2004)\"\n        required={true}\n        ref={dateRef}\n      />\n      <button className=\"newEvent-btn\" onClick={createNewEvent}>\n        Create\n      </button>\n    </div>\n  );\n};\n\nexport default NewEventFields;\n"]},"metadata":{},"sourceType":"module"}